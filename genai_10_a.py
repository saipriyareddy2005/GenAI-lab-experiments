# -*- coding: utf-8 -*-
"""genai_10_a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EqzSO58g-5P-kUkHZG51x_cosZD-QMv9
"""

!pip install gradio

import gradio as gr

def greet(name):
  return "Hello " + name + "!!"

demo = gr.Interface(fn=greet, inputs=gr.Textbox(label="Enter ypur name"), outputs=gr.Text(label="Greeting"))


demo.launch(share=False)

import gradio as gr
def multiply_by_slider(value):
  return value * 2

demo = gr.Interface(fn=multiply_by_slider, inputs=gr.Slider(1,100), outputs="text")
demo.launch()

import gradio as gr

def check(value):
    return "Checked" if value else "Not Checked"

demo = gr.Interface(fn=check, inputs=gr.Checkbox(label="Check me"), outputs=gr.Text(label="Status"))
demo.launch()

import gradio as gr

def select_option(option):
    return f"You selected: {option}"

demo = gr.Interface(fn=select_option, inputs=gr.Radio(["Option 1", "Option 2"], label="Pick an option"), outputs=gr.Text(label="Selected Option"))
demo.launch()

import gradio as gr

def select_item(item):
    return f"You chose: {item}"

demo = gr.Interface(fn=select_item, inputs=gr.Dropdown(["Item 1", "Item 2", "Item 3"], label="Select an item"), outputs=gr.Text(label="Chosen Item"))
demo.launch()

import gradio as gr

def display_image(image):
    return image

demo = gr.Interface(fn=display_image, inputs=gr.Image(label="Upload an image"), outputs=gr.Image(label="Displayed Image"))
demo.launch()

import gradio as gr

def process_video(video):
    return video

demo = gr.Interface(fn=process_video, inputs=gr.Video(label="Upload a video"), outputs=gr.Video(label="Processed Video"))
demo.launch()

import gradio as gr

def process_audio(audio):
    return audio

demo = gr.Interface(fn=process_audio, inputs=gr.Audio(label="Upload or record audio"), outputs=gr.Audio(label="Processed Audio"))
demo.launch()

import gradio as gr
import json

# Function to process JSON input
def process_json(json_data):
    try:
        # Parse the input as JSON
        parsed_data = json.loads(json_data)
        return {"Received Data": parsed_data}
    except json.JSONDecodeError:
        # Handle invalid JSON
        return {"error": "Invalid JSON format. Please provide valid JSON."}

# Gradio Interface
demo = gr.Interface(
    fn=process_json,
    inputs=gr.Textbox(label="Input JSON (e.g., {'key': 'value'})", lines=5, placeholder="Enter valid JSON here"),
    outputs=gr.JSON(label="Processed JSON")
)

# Launch the application
demo.launch()

import gradio as gr

with gr.Blocks() as demo:
    with gr.Row():
        textbox = gr.Textbox(label="Text Input")
        slider = gr.Slider(0, 100, label="Slider")
        checkbox = gr.Checkbox(label="Checkbox")

    output = gr.Text(label="Output")

    def process_inputs(text, slider_value, checkbox_value):
        return f"Text: {text}, Slider: {slider_value}, Checkbox: {'Checked' if checkbox_value else 'Unchecked'}"

    submit_button = gr.Button("Submit")
    submit_button.click(process_inputs, inputs=[textbox, slider, checkbox], outputs=output)

demo.launch()

import gradio as gr

with gr.Blocks() as demo:
    with gr.Tab("Tab 1"):
        gr.Textbox(label="Input for Tab 1")
    with gr.Tab("Tab 2"):
        gr.Textbox(label="Input for Tab 2")

demo.launch()

import gradio as gr

def chatbot_response(message, history):
    history.append((message, f"Bot: {message[::-1]}"))  # Example: Reverse the text
    return history, history

with gr.Blocks() as demo:
    chatbot = gr.Chatbot(label="Chat with Bot")
    text_input = gr.Textbox(label="Type your message here")
    submit = gr.Button("Send")

    submit.click(chatbot_response, inputs=[text_input, chatbot], outputs=[chatbot, chatbot])

demo.launch()

